/******/ (() => { // webpackBootstrap
/*!*****************************!*\
  !*** ./scripts/main.coffee ***!
  \*****************************/
(function() {
  var API_KEY, BASE_URL, DATE, TOP_STRING, api, btn, commentAuthors, fetchData, form, getVideoIdFromUrl, input, processThread, processThreadComments, processThreadReplies, regexShort, regexVideo, saveAndDownload;
  input = document.getElementById('url');
  form = document.querySelector('.form');
  btn = document.querySelector('.btn');
  api = document.getElementById('api');
  api.value = localStorage.getItem('API_KEY');
  DATE = new Date().toISOString().split('T')[0];
  TOP_STRING = '';
  regexShort = /(?:youtube\.com\/shorts\/)([a-zA-Z0-9_-]{11})/;
  regexVideo = /(?:youtube\.com\/watch\?v=)([a-zA-Z0-9_-]{11})/;
  API_KEY = '';
  BASE_URL = 'https://www.googleapis.com/youtube/v3/commentThreads?part=snippet,replies&';
  commentAuthors = {};
  form.addEventListener('submit', function(e) {
    var include, videoUrl;
    e.preventDefault();
    localStorage.setItem('API_KEY', api.value.trim());
    API_KEY = localStorage.getItem('API_KEY');
    videoUrl = input.value.trim();
    include = 'youtube.com';
    if (!videoUrl.includes(include)) {
      console.error('Type a valid yt url');
      return;
    }
    form.reset();
    return fetchData(videoUrl);
  });
  fetchData = function(videoUrl) {
    return getVideoIdFromUrl(videoUrl).then(function(videoId) {
      var comments, fetchComments, nextPageToken;
      nextPageToken = null;
      comments = [];
      fetchComments = function() {
        var url;
        url = `${BASE_URL}videoId=${videoId}&key=${API_KEY}`;
        if (nextPageToken) {
          url += `&pageToken=${nextPageToken}`;
        }
        url += "&maxResults=100";
        return fetch(url).then(function(r) {
          return r.json();
        }).then(function(d) {
          var items, nextToken;
          items = d.items;
          nextToken = d.nextPageToken;
          comments.push(...items);
          if (nextToken) {
            nextPageToken = nextToken;
            return fetchComments();
          } else {
            return processThread(comments);
          }
        });
      };
      return fetchComments();
    });
  };
  processThread = function(comments) {
    var comment, j, len, replies;
    processThreadComments(comments);
    for (j = 0, len = comments.length; j < len; j++) {
      comment = comments[j];
      if (comment.snippet.totalReplyCount) {
        ({replies} = comment);
        processThreadReplies(replies);
      }
    }
    return saveAndDownload();
  };
  processThreadComments = function(comments) {
    return comments.map(function(i) {
      var authorDisplayName, cleanedText, id, likeCount, snippet, textOriginal;
      ({id, snippet} = i);
      ({authorDisplayName, textOriginal, likeCount} = snippet.topLevelComment.snippet);
      cleanedText = textOriginal.replace(/\n/g, '').replaceAll(",", ". ");
      commentAuthors[id] = {
        name: authorDisplayName,
        id: id
      };
      TOP_STRING += `${authorDisplayName},${cleanedText},like: ${likeCount}`;
      return TOP_STRING += "\n";
    });
  };
  processThreadReplies = function(replies) {
    return replies.comments.map(function(i) {
      var authorDisplayName, cleanedText, likeCount, parentAuthor, parentId, textOriginal;
      ({authorDisplayName, textOriginal, likeCount, parentId} = i.snippet);
      cleanedText = textOriginal.replace(/\n/g, '').replaceAll(",", ". ");
      if (commentAuthors[parentId]) {
        parentAuthor = commentAuthors[parentId].name;
        parentId = commentAuthors[parentId].id;
      } else {
        parentAuthor = 'Undefined';
        parentId = 'Undefined';
      }
      TOP_STRING += `${authorDisplayName},${cleanedText},like: ${likeCount},replyTo: ${parentAuthor},replyId: ${parentId}`;
      return TOP_STRING += "\n";
    });
  };
  getVideoIdFromUrl = function(url) {
    return new Promise(function(resolve, reject) {
      var matchShort, matchVideo;
      matchShort = url.match(regexShort);
      matchVideo = url.match(regexVideo);
      if (matchShort && matchShort[1]) {
        return resolve(matchShort[1]);
      } else if (matchVideo && matchVideo[1]) {
        return resolve(matchVideo[1]);
      } else {
        return reject('Unable to extract video ID from URL');
      }
    });
  };
  return saveAndDownload = function() {
    var blob, filename, url;
    filename = `comments-${DATE}.csv`;
    blob = new Blob([TOP_STRING], {
      type: 'text/csv'
    });
    url = URL.createObjectURL(blob);
    return chrome.downloads.download({
      url: url,
      filename: filename,
      saveAs: true
    });
  };
})();

/******/ })()
;